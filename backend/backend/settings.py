# -*- coding: utf-8 -*-

"""
Django settings for AovToolsBackend project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import json
import os
from urllib.parse import quote_plus as urlquote
from sqlalchemy import create_engine
from common.logger import loginfo

# ENV
GPT_ENV = os.environ.get("GPT_ENV", "DEV")
from backend.basic_settings import *
if GPT_ENV == "PRD":
    CONF_PATH = os.path.join(os.getcwd(), "config/conf/prd/backend/settings.json")
    from config.conf.prd.backend.sa_settings import *
elif GPT_ENV == "DEV":
    # Docker 环境使用特殊配置文件
    CONF_PATH = os.path.join(os.getcwd(), "config/conf/dev/backend/settings.json")
    from config.conf.dev.backend.sa_settings import *


def load_config():
    loginfo(f"load config from {CONF_PATH}")
    assert os.path.exists(CONF_PATH)
    with open(CONF_PATH, encoding='UTF-8') as f:
        cfg = json.load(f)
    return type("ConfigFromJson", (object,), cfg)
Config = load_config()


MysqlConfig = Config.mysql
MYSQL_DB = MysqlConfig["db"]
MYSQL_USER = MysqlConfig["user"]
MYSQL_PASSWORD = MysqlConfig["password"]
MYSQL_HOST = MysqlConfig["host"]
MYSQL_PORT = MysqlConfig["port"]
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": MYSQL_DB,
        "USER": MYSQL_USER,
        "PASSWORD": MYSQL_PASSWORD,
        "HOST": MYSQL_HOST,
        "PORT": MYSQL_PORT,
        "OPTIONS": {
            "charset": "utf8",
            "init_command": "SET SESSION time_zone='+08:00',"
            "sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO'",
            "isolation_level": "repeatable read",
        },
    }
}

SA_CONNECTION_URL = f"mysql+mysqldb://{MYSQL_USER}:{urlquote(MYSQL_PASSWORD)}@{MYSQL_HOST}:{MYSQL_PORT}/{MYSQL_DB}?charset=utf8mb4"
SA_ENGINE = create_engine(SA_CONNECTION_URL, pool_size=4096, pool_recycle=SA_POOL_RECYCLE, pool_pre_ping=True)

RedisConfig = Config.redis
REDIS_HOST  = RedisConfig["host"]
REDIS_PORT  = RedisConfig["port"]
REDIS_DB    = RedisConfig["db"]
REDIS_PWD   = RedisConfig["password"]
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:{}/{}".format(REDIS_HOST, REDIS_PORT, REDIS_DB),
        "OPTIONS": {
            "PASSWORD": REDIS_PWD,
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "KEY_PREFIX": "cache",
    }
}
