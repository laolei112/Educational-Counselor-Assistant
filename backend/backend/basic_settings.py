# -*- coding: utf-8 -*-

"""
Django settings for AovToolsBackend project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import json
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.getcwd()

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "=ub&b-w-_)mpq&5-e#jjp+y)%tvh-c23mnmbo23qx1trrj8-jp"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = [
    "*",
    "localhost",
    "127.0.0.1",
]
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "drf_yasg",
    "backend.models",
]

MIDDLEWARE = [
    "django_grip.GripMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # 国际化中间件，需要放置在 SessionMiddleware 中间件后面
    "django.middleware.locale.LocaleMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.common.CommonMiddleware",
    #"django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # ========== 防爬取和安全中间件（按顺序执行）==========
    "backend.middleware.RateLimitMiddleware.RateLimitMiddleware",  # 频率限制（最先执行，快速拒绝）
    "backend.middleware.AntiCrawlerMiddleware.AntiCrawlerMiddleware",  # 反爬虫检测
    "backend.middleware.TokenAuthMiddleware.TokenAuthMiddleware",  # JWT Token认证（推荐）
    # "backend.middleware.SignatureMiddleware.SignatureMiddleware",  # 签名验证（旧方案，已注释）
    # =====================================================
    "backend.middleware.AuthMiddleware.AuthMiddleware",  # 登录态验证
    "backend.middleware.ExceptionMiddleware.ExceptionMiddleware",  # noqa
]

CORS_ORIGIN_ALLOW_ALL = True  # 默认为False
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie
CORS_ORIGIN_WHITELIST = (
    "http://127.0.0.1:8080",
    "http://localhost:8080",
    "http://43.153.124.180:8080",
    # Frontend development servers
    "http://127.0.0.1:3000",
    "http://localhost:3000",
    "http://127.0.0.1:5173",
    "http://localhost:5173",
)
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
    'accept',
    # 防爬取相关的自定义请求头
    'x-api-key',
    'x-timestamp',
    'x-nonce',
    'x-signature',
    'x-device-id',
    'x-device-fingerprint',
)

SESSION_COOKIE_HTTPONLY = True  # session httponly
SESSION_COOKIE_AGE = 86400  # 默认session有效期为一天
SESSION_COOKIE_NAME = "sessionid"
SESSION_COOKIE_AGE = 1209600                # Session的cookie失效日期单位是秒（默认2周）
SESSION_EXPIRE_AT_BROWSER_CLOSE = False     # 是否关闭浏览器使得Session过期,关闭浏览器要重新登录（默认）


ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["backend/dist/"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
WSGI_APPLICATION = "backend.wsgi.application"

REQUEST_RATELIMIT = 100
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        #"rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        #"rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
   'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": f"{REQUEST_RATELIMIT}/min",
        "user": f"{REQUEST_RATELIMIT}/min",
    },
}


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# LANGUAGE_CODE = "zh-Hans"
LANGUAGE_CODE = "en"
TIME_ZONE = "Asia/Shanghai"

# 开启国际化
USE_I18N = True

# 开启本地化
USE_L10N = True
USE_TZ = False

LANGUAGES = (
    ("en", "English"),
    ("zh-cn", "中文简体"),
)
# 翻译文件所在目录, 与 manage.py 文件在同级目录下
LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "backend", "dist", "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, "backend", "static_cdn")
print("STATICFILES_DIRS:  ", STATICFILES_DIRS)


# ================================ 日志配置开始 ================================
LOG_DIR = BASE_DIR + "/log/"
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,  # 是否禁用已经存在的日志器
    "formatters": {  # 日志信息显示的格式
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(message)s"
            # "class": "pythonjsonlogger.jsonlogger.JsonFormatter"
        },
        "simple": {
            "format": "%(levelname)s %(asctime)s %(message)s"
            # "class": "pythonjsonlogger.jsonlogger.JsonFormatter"
        },  # 日志记录级别+时间日期+模块名称+函数名称+行号+记录消息
    },
    "filters": {  # 对日志进行过滤
        "require_debug_true": {  # django在debug模式下才输出日志
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {  # 日志处理方法
        "console": {  # 向终端中输出日志
            "level": "INFO",
            "filters": [],  # debug为true才会输出
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "info": {  # 向文件中输出日志
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(LOG_DIR, "backend.log"),  # 日志文件的位置
            "maxBytes": 300 * 1024 * 1024,  # 300M大小
            "backupCount": 10,
            "formatter": "verbose",
            "encoding": "utf-8",
        },
    },
    "loggers": {  # 日志器
        "backend": {"handlers": ["info", "console"], "propagate": True, "level": "INFO"},  # 默认的logger应用如下配置
        # Might as well log any errors anywhere else in Django
        "django": {
            "handlers": ["info", "console"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}
# ================================ 日志配置结束 ================================

# ================================ swagger配置开始 ================================
# https://blog.csdn.net/u012328712/article/details/84307658
SWAGGER_SETTINGS = {
    'LOGIN_URL': '/api/login',
    'LOGOUT_URL': '/api/logout',
    'PERSIST_AUTH': True,
    'REFETCH_SCHEMA_WITH_AUTH': True,
    'REFETCH_SCHEMA_ON_LOGOUT': True,

    'DEFAULT_INFO': 'DjangoDrfTest.urls.swagger_info', #这里注意，更改DjangoDrfTest

    'SECURITY_DEFINITIONS': {
        'Basic': {
            'type': 'basic'
        },
        'Bearer': {
            'type': 'apiKey',
            'name': 'authorization',
            'in': 'header'
        },
        'Query': {
            'type': 'apiKey',
            'name': 'auth',
            'in': 'query'
        }
    }
}
# ================================ swagger配置结束 ================================

# 自动添加 url 末尾斜杆
APPEND_SLASH = False
